package com.speedment.example.securerest.db.account.generated;

import com.speedment.example.securerest.db.account.Account;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import javax.annotation.Generated;

/**
 * The generated base for the {@link
 * com.speedment.example.securerest.db.account.Account}-interface representing
 * entities of the {@code account}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedAccount {
    
    /**
     * This Field corresponds to the {@link Account} field that can be obtained
     * using the {@link Account#getId()} method.
     */
    final LongField<Account, Long> ID = LongField.create(
        Identifier.ID,
        Account::getId,
        Account::setId,
        TypeMapper.primitive(), 
        true
    );
    /**
     * This Field corresponds to the {@link Account} field that can be obtained
     * using the {@link Account#getUsername()} method.
     */
    final StringField<Account, String> USERNAME = StringField.create(
        Identifier.USERNAME,
        Account::getUsername,
        Account::setUsername,
        TypeMapper.identity(), 
        true
    );
    /**
     * This Field corresponds to the {@link Account} field that can be obtained
     * using the {@link Account#getPassword()} method.
     */
    final StringField<Account, String> PASSWORD = StringField.create(
        Identifier.PASSWORD,
        Account::getPassword,
        Account::setPassword,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Account} field that can be obtained
     * using the {@link Account#getRole()} method.
     */
    final StringField<Account, String> ROLE = StringField.create(
        Identifier.ROLE,
        Account::getRole,
        Account::setRole,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the id of this Account. The id field corresponds to the database
     * column db0.securerest.account.id.
     * 
     * @return the id of this Account
     */
    long getId();
    
    /**
     * Returns the username of this Account. The username field corresponds to
     * the database column db0.securerest.account.username.
     * 
     * @return the username of this Account
     */
    String getUsername();
    
    /**
     * Returns the password of this Account. The password field corresponds to
     * the database column db0.securerest.account.password.
     * 
     * @return the password of this Account
     */
    String getPassword();
    
    /**
     * Returns the role of this Account. The role field corresponds to the
     * database column db0.securerest.account.role.
     * 
     * @return the role of this Account
     */
    String getRole();
    
    /**
     * Sets the id of this Account. The id field corresponds to the database
     * column db0.securerest.account.id.
     * 
     * @param id to set of this Account
     * @return   this Account instance
     */
    Account setId(long id);
    
    /**
     * Sets the username of this Account. The username field corresponds to the
     * database column db0.securerest.account.username.
     * 
     * @param username to set of this Account
     * @return         this Account instance
     */
    Account setUsername(String username);
    
    /**
     * Sets the password of this Account. The password field corresponds to the
     * database column db0.securerest.account.password.
     * 
     * @param password to set of this Account
     * @return         this Account instance
     */
    Account setPassword(String password);
    
    /**
     * Sets the role of this Account. The role field corresponds to the database
     * column db0.securerest.account.role.
     * 
     * @param role to set of this Account
     * @return     this Account instance
     */
    Account setRole(String role);
    
    enum Identifier implements ColumnIdentifier<Account> {
        
        ID       ("id"),
        USERNAME ("username"),
        PASSWORD ("password"),
        ROLE     ("role");
        
        private final String columnName;
        private final TableIdentifier<Account> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "db0";
        }
        
        @Override
        public String getSchemaName() {
            return "securerest";
        }
        
        @Override
        public String getTableName() {
            return "account";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Account> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}